#include "device_registers.h"   
#include "clocks_and_modes.h"
#include "LPUART.h"
#include <stdio.h>

char data=0;


int lpit0_ch0_flag_counter = 0; /*< LPIT0 timeoutcounter*/

unsigned int FND_DATA[10]={0x3F, 0x06,0x5b,0x4F,0x66,0x6D,0x7C,0x07,0x7F,0x67};
unsigned int FND_SEL[5]={0x2000,0x4000,0x8000,0x10000};
unsigned int FND_ENG[13]={0b01110001,0b01110111,0b00110000, 0b00111000, 0b01011100,0b01110011,0b01111001, 0b01010101, 0b01011110, 0b01101010, 0b01111000,0b01010100};//failopemdwtN

unsigned int j=0;
unsigned int num=0,num0=0,num1=0,num2=0,num3=0;
//unsigned int money=0, money0=0,money1=0,money2=0,money3=0; //?

/*numisCountingvalue, num0 is'1', num2 is'10', num2 is'100', num3 is'1000'*/

unsigned int External_PIN=0; /* External_PIN:SWExternalinputAssignment*/
unsigned int Dtime= 0; /* DelayTime SettingVariable*/
unsigned int mode = 0;
unsigned int wait = 0;
unsigned int money = 0;
	
unsigned int input_pw = 0;
unsigned int pw = 0;
	
unsigned int num17 = 0;
unsigned int num14 = 0;



void PORT_init(void){
	//PORTC,D,E Data ClockSet
	PCC->PCCn[PCC_PORTC_INDEX]|=PCC_PCCn_CGC_MASK; /* EnableclockforPORTC */
	PCC->PCCn[PCC_PORTD_INDEX]|=PCC_PCCn_CGC_MASK; /* EnableclockforPORTD */
	PCC->PCCn[PCC_PORTE_INDEX]|=PCC_PCCn_CGC_MASK; /* EnableclockforPORTE */
	
	//PortC,D,EData DirectionSet
	PTC->PDDR &= ~(1<<6)|~(1<<7)|~(1<<12)|~(1<<13)|~(1<<14)|~(1<<15)|~(1<<16)|~(1<<17);/* PortC12 PortInputset, value'0'*/
	PTD->PDDR |= 1<<0|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7;/* PortD0~7: FND Data Direction= output*/
	PTE->PDDR |= 1<<13|1<<14|1<<15|1<<16; /*FND SelectDirection*/
	
	// PORTC_12 pinGPIO and Falling-edgeSet
	PORTC->PCR[6] |= PORT_PCR_MUX(1);	
	PORTC->PCR[7] |= PORT_PCR_MUX(1);
	PORTC->PCR[12] |= PORT_PCR_MUX(1); // PortC12 mux= GPIO
	PORTC->PCR[13] |= PORT_PCR_MUX(1);
	PORTC->PCR[14] |= PORT_PCR_MUX(1);
	PORTC->PCR[15] |= PORT_PCR_MUX(1);
	PORTC->PCR[16] |= PORT_PCR_MUX(1);
	PORTC->PCR[17] |= PORT_PCR_MUX(1);
  
	PORTC->PCR[6] |=(10<<16);
	PORTC->PCR[7] |=(10<<16);
	PORTC->PCR[12] |=(10<<16); // PortC12 IRQC : interruptonFalling-edge
	PORTC->PCR[13] |=(10<<16);
	PORTC->PCR[14] |=(10<<16);
	PORTC->PCR[15] |=(10<<16);
	PORTC->PCR[16] |=(10<<16);
	PORTC->PCR[17] |=(10<<16);
	
	//PORTD,E FND ControlPinPCR Set, PTD0~PTD7:FND_DATA Control, PTE13~PTE16:FND_Select Control
	PORTD->PCR[0] = PORT_PCR_MUX(1);/* PortD0: MUX = GPIO */
	PORTD->PCR[1] = PORT_PCR_MUX(1);/* PortD1: MUX = GPIO */
	PORTD->PCR[2] = PORT_PCR_MUX(1);/* PortD2: MUX = GPIO */
	PORTD->PCR[3] = PORT_PCR_MUX(1);/* PortD3: MUX = GPIO */
	PORTD->PCR[4] = PORT_PCR_MUX(1);/* PortD4: MUX = GPIO */
	PORTD->PCR[5] = PORT_PCR_MUX(1);/* PortD5: MUX = GPIO */
	PORTD->PCR[6] = PORT_PCR_MUX(1);/* PortD6: MUX = GPIO */
	PORTD->PCR[7] = PORT_PCR_MUX(1);/* PortD7: MUX = GPIO */

	PORTE->PCR[13] = PORT_PCR_MUX(1); /*PortD13: mux= GPIO */
	PORTE->PCR[14] = PORT_PCR_MUX(1); /*PortD14: mux= GPIO */
	PORTE->PCR[15] = PORT_PCR_MUX(1); /*PortD15: mux= GPIO */
	PORTE->PCR[16] = PORT_PCR_MUX(1); /*PortD16: mux= GPIO */
}
void WDOG_disable (void){
  WDOG->CNT=0xD928C520;     /* Unlock watchdog */
  WDOG->TOVAL=0x0000FFFF;   /* Maximum timeout value */
  WDOG->CS = 0x00002100;    /* Disable watchdog */
}
void LPIT0_init (uint32_t delay){
   uint32_t timeout;
   /*!
    * LPIT Clocking:
    * ==============================
    */
  PCC->PCCn[PCC_LPIT_INDEX] = PCC_PCCn_PCS(6);    /* Clock Src = 6 (SPLL2_DIV2_CLK)*/
  PCC->PCCn[PCC_LPIT_INDEX] |= PCC_PCCn_CGC_MASK; /* Enable clk to LPIT0 regs       */

  /*!
   * LPIT Initialization:
   */
  LPIT0->MCR |= LPIT_MCR_M_CEN_MASK;  /* DBG_EN-0: Timer chans stop in Debug mode */
                                        /* DOZE_EN=0: Timer chans are stopped in DOZE mode */
                                        /* SW_RST=0: SW reset does not reset timer chans, regs */
                                        /* M_CEN=1: enable module clk (allows writing other LPIT0 regs) */

  timeout=delay * 40000;
  LPIT0->TMR[0].TVAL = timeout;      /* Chan 0 Timeout period: 40M clocks */
  LPIT0->TMR[0].TCTRL |= LPIT_TMR_TCTRL_T_EN_MASK;
                              /* T_EN=1: Timer channel is enabled */
                              /* CHAIN=0: channel chaining is disabled */
                              /* MODE=0: 32 periodic counter mode */
                              /* TSOT=0: Timer decrements immediately based on restart */
                              /* TSOI=0: Timer does not stop after timeout */
                              /* TROT=0 Timer will not reload on trigger */
                              /* TRG_SRC=0: External trigger soruce */
                              /* TRG_SEL=0: Timer chan 0 trigger source is selected*/
}
void delay_ms(volatile int ms){
	LPIT0_init(ms); /* InitializePIT0 for1 secondtimeout*/
	while(0 == (LPIT0->MSR & LPIT_MSR_TIF0_MASK)) {} /* WaitforLPIT0 CH0 Flag*/
	lpit0_ch0_flag_counter++; /* IncrementLPIT0 timeoutcounter*/
	LPIT0->MSR |= LPIT_MSR_TIF0_MASK; /* ClearLPIT0 timerflag0 */
}
void NVIC_init_IRQs(void){
	S32_NVIC->ICPR[1] |= 1<<(61%32); // ClearanypendingIRQ61
	S32_NVIC->ISER[1] |= 1<<(61%32); // EnableIRQ61
	S32_NVIC->IP[61] =0xB; //Priority11 of 15
}

void fnd_fail()
{
	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[0];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[1];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[2];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;
	
	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[3];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j=0;
}

void fnd_open()
{
	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[4];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[5];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[6];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;
	
	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[11];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j=0;
}

void fnd_mode()
{
	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[7];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[4];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[8];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;
	
	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[6];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j=0;
}

void fnd_wait()
{
	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[9];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[1];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[2];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;
	
	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_ENG[10];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j=0;
}

void fnd_use()
{
	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_DATA[3];
	delay_ms(Dtime);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_DATA[3];
	delay_ms(Dtime);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_DATA[3];
	delay_ms(Dtime);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;
	
	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_DATA[3];
	delay_ms(Dtime);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j=0;
}

void fnd_sucess()
{
	unsigned int FND_SUCDATA[15]={0b00000000,0b00000000,0b00000000,0b00000000,0b01101101,0b00011100,0b01011000,0b01011000,0b01111001,0b01101101,0b01101101,0b00000000,0b00000000,0b00000000,0b00000000};//off s u c c e s s

	for(int x = 1; x < 12; x++){
		for(int y = 0; y<4 ; y++){
		
			
			PTE->PSOR = FND_SEL[y];
			PTD->PCOR = FND_SUCDATA[x+y];
			delay_ms(100);
			PTD->PSOR =0xff;
			PTE->PCOR = 0xfffff;
		}
	}
}


void PORTC_IRQHandler(void)
{
	PORTC->PCR[6] &= ~(0x01000000);
	PORTC->PCR[7] &= ~(0x01000000);
	PORTC->PCR[12] &= ~(0x01000000); 
	PORTC->PCR[13] &= ~(0x01000000);
	PORTC->PCR[14] &= ~(0x01000000); 
	PORTC->PCR[15] &= ~(0x01000000);
	PORTC->PCR[16] &= ~(0x01000000); 
	PORTC->PCR[17] &= ~(0x01000000);
	
	
	if(((PORTC->ISFR&(1<<6)) != 0)&&(wait ==1))
	{
		delay_ms(10);
		num += 1000;
	}
	else if(((PORTC->ISFR&(1<<7)) != 0)&&(wait ==1))
	{
		delay_ms(10);
		num += 100;
	}
	else if(((PORTC->ISFR&(1<<12)) != 0)&&(wait ==1))
	{
		delay_ms(10);
		num += 10;
	}
	else if(((PORTC->ISFR&(1<<13)) != 0)&&(wait ==1))
	{
		delay_ms(10);
		num += 1;
	}
	
	
	else if(((PORTC->ISFR&(1<<14)) != 0)&&(wait ==1))
	{
		delay_ms(10);
		num14 ++;
		if(num14 % 2 == 0)   // 
		{
			mode = 1; //out
		}
		
		else if(num14 % 2 == 1)  //
		{
			mode = 0; //in
		}
	}
	
	else if(((PORTC->ISFR&(1<<15)) != 0)&&(wait ==1))
	{
		delay_ms(10);
		mode = 2;
	}
	
	else if(((PORTC->ISFR&(1<<16)) != 0)&&(wait ==1) && (mode == 3))
	{
		delay_ms(10);
		if(input_pw == num)
		{
			fnd_open();
		}
		else
		{
			fnd_fail();
		}
	}
	
	else if(((PORTC->ISFR&(1<<16)) != 0)&&(wait ==1) && (mode == 0))
	{
		delay_ms(10);
		if(num<=9999)
		{
			money += num;
		}
		else
		{
			fnd_fail();
		}
	}
	
	else if(((PORTC->ISFR&(1<<16)) != 0)&&(wait ==1) && (mode == 1))
	{
		delay_ms(10);
		if(num<=9999)
		{
			money -= num;
		}
		else
		{
			fnd_fail();
		}
	}
	
	else if(((PORTC->ISFR&(1<<16)) != 0)&&(wait ==1) && (mode == 2))
	{
		delay_ms(10);
		if(num<=9999)
		{
			pw = num;
		}
		else
		{
			fnd_fail();
		}	
	}
	
	else if(((PORTC->ISFR&(1<<17)) != 0))
	{
		delay_ms(10);
		num17 += 1;
		
		if(num17 % 2 == 1)
		{
			wait = 0;
		}
		
		else if(num17 % 2 == 0)
		{
			wait = 1;
		}
	}

	
	PORTC->PCR[6] |= 0x01000000;
	PORTC->PCR[7] |= 0x01000000;
	PORTC->PCR[12] |= 0x01000000; // PortControlRegisterISF bit'1' set
	PORTC->PCR[13] |= 0x01000000;
	PORTC->PCR[14] |= 0x01000000;
	PORTC->PCR[15] |= 0x01000000;
	PORTC->PCR[16] |= 0x01000000;
	PORTC->PCR[17] |= 0x01000000;
}


void FND_select(int num)
{
	num3=(num/1000) % 10;
	num2=(num/100) % 10;
	num1=(num/10) % 10;
	num0= num % 10;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_DATA[num3];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_DATA[num2];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;

	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_DATA[num1];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j++;
	
	PTE->PSOR = FND_SEL[j];
	PTD->PCOR = FND_DATA[num0];
	delay_ms(Dtime/300);
	PTD->PSOR =0xff;
	PTE->PCOR = 0xfffff;
	j=0;
}


int main(void)
{
	WDOG_disable();/* DisableWatchdogincaseitisnotdoneinstartupcode*/
	PORT_init(); /* Configureports*/
	SOSC_init_8MHz(); /* Initializesystemoscilatorfor8 MHzxtal*/
	SPLL_init_160MHz(); /* InitializeSPLL to160 MHzwith8 MHzSOSC */
	NormalRUNmode_80MHz(); /* Initclocks: 80 MHzsysclk& core, 40 MHzbus, 20 MHzflash*/
	NVIC_init_IRQs(); /*InterruptPending, Endable, PrioritySet*/

	Dtime= 500; // DelayResetValue
	num=0000; // FND ResetValue

	
while(1)
	{ /* LoopStart*/
/*
		if(wait == 0)
		{
		fnd_wait();
		}
		else if(wait == 1)
		{
		fnd_mode();
		}
		else if((wait == 1) &&(num>>0))
		{
		FND_select(num);
		}

*/
	}
}
